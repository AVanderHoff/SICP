(define (make-accumulator start)
  (let ((initial start))
    (lambda(add)(set! initial (+ initial add))
                       initial)))


(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond((eq? m 'withdraw)withdraw)
         ((eq? m 'deposit)deposit)
         (else (error "unknown request--MAKE-ACCOUNT"
                      m))))dispatch)

(define (make-monitored proc)
  (let((count 0))
    (define (mf x)
      (cond((eq? x 'how-many-calls?)count)
           ((eq? x 'reset-count)(set! count 0))
           (else (begin (set! count (+ count 1))
                        (proc x)))))mf))

(define (make-account-p balance password)
  (let ((number-of-incorrect-password 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (check amount )balance)
    (define (call-the-cops amount)
      (display "call the cops"))
    (define (display-error amount)
      "Incorrect password")
    (define (dispatch p m)
      (if (eq? p password)
          (begin (set! number-of-incorrect-password 0)
                 (cond ((eq? m 'withdraw) withdraw)
                       ((eq? m 'deposit) deposit)
                       ((eq? m 'check) check)
                       (else (error "Unknown request -- MAKE-ACCOUNT"
                                    m))))
          (begin (set! number-of-incorrect-password
                       (+ 1  number-of-incorrect-password))
                 (if (> number-of-incorrect-password 7)
                     call-the-cops
                     display-error))))
    dispatch))

(define (make-account-p2 balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (display-error amount)
    "Incorrect password")
  (let ((password-list (list password)))
    (define (mkj new-password)
      (set! password-list (cons new-password password-list))
      dispatch)
    (define (dispatch p m)
      (if (memq p password-list)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                ((eq? m 'make-joint) mkj)
                (else (error "Unknown request -- MAKE-ACCOUNT"
                             m)))
          display-error))
    dispatch))

(define (make-joint account old-password new-password)
  ((account old-password 'make-joint) new-password))

(define f
  (let ((state 0))
    (define (switch-state x)
      (let ((old-state state))
        (set! state (+ x state))
        old-state))
    switch-state))

  

    

